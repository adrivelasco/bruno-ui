/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  SizeType,
  StyleType,
} from './objects/types';
import {
  EventEmitter,
} from '@stencil/core';

declare global {

  namespace StencilComponents {
    interface BrnButton {
      'modifier': string;
      'size': keyof SizeType;
      'text': string;
      'type': keyof StyleType;
    }
  }

  interface HTMLBrnButtonElement extends StencilComponents.BrnButton, HTMLStencilElement {}

  var HTMLBrnButtonElement: {
    prototype: HTMLBrnButtonElement;
    new (): HTMLBrnButtonElement;
  };
  interface HTMLElementTagNameMap {
    'brn-button': HTMLBrnButtonElement;
  }
  interface ElementTagNameMap {
    'brn-button': HTMLBrnButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-button': JSXElements.BrnButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnButtonAttributes extends HTMLAttributes {
      'modifier'?: string;
      'onClicked'?: (event: CustomEvent<MouseEvent>) => void;
      'size'?: keyof SizeType;
      'text'?: string;
      'type'?: keyof StyleType;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BrnCheckbox {
      'checked': boolean;
      'text': string;
      'type': keyof StyleType;
    }
  }

  interface HTMLBrnCheckboxElement extends StencilComponents.BrnCheckbox, HTMLStencilElement {}

  var HTMLBrnCheckboxElement: {
    prototype: HTMLBrnCheckboxElement;
    new (): HTMLBrnCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'brn-checkbox': HTMLBrnCheckboxElement;
  }
  interface ElementTagNameMap {
    'brn-checkbox': HTMLBrnCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-checkbox': JSXElements.BrnCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnCheckboxAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'onChanged'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
      'type'?: keyof StyleType;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BrnColumn {
      'columns': number;
      'total': number;
    }
  }

  interface HTMLBrnColumnElement extends StencilComponents.BrnColumn, HTMLStencilElement {}

  var HTMLBrnColumnElement: {
    prototype: HTMLBrnColumnElement;
    new (): HTMLBrnColumnElement;
  };
  interface HTMLElementTagNameMap {
    'brn-column': HTMLBrnColumnElement;
  }
  interface ElementTagNameMap {
    'brn-column': HTMLBrnColumnElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-column': JSXElements.BrnColumnAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnColumnAttributes extends HTMLAttributes {
      'columns'?: number;
      'total'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BrnRadio {
      'checked': boolean;
      'name': string;
      'text': string;
      'type': keyof StyleType;
    }
  }

  interface HTMLBrnRadioElement extends StencilComponents.BrnRadio, HTMLStencilElement {}

  var HTMLBrnRadioElement: {
    prototype: HTMLBrnRadioElement;
    new (): HTMLBrnRadioElement;
  };
  interface HTMLElementTagNameMap {
    'brn-radio': HTMLBrnRadioElement;
  }
  interface ElementTagNameMap {
    'brn-radio': HTMLBrnRadioElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-radio': JSXElements.BrnRadioAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnRadioAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'name'?: string;
      'onChanged'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
      'type'?: keyof StyleType;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BrnRow {

    }
  }

  interface HTMLBrnRowElement extends StencilComponents.BrnRow, HTMLStencilElement {}

  var HTMLBrnRowElement: {
    prototype: HTMLBrnRowElement;
    new (): HTMLBrnRowElement;
  };
  interface HTMLElementTagNameMap {
    'brn-row': HTMLBrnRowElement;
  }
  interface ElementTagNameMap {
    'brn-row': HTMLBrnRowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-row': JSXElements.BrnRowAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnRowAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BrnToggle {
      'checked': boolean;
      'text': string;
      'type': keyof StyleType;
    }
  }

  interface HTMLBrnToggleElement extends StencilComponents.BrnToggle, HTMLStencilElement {}

  var HTMLBrnToggleElement: {
    prototype: HTMLBrnToggleElement;
    new (): HTMLBrnToggleElement;
  };
  interface HTMLElementTagNameMap {
    'brn-toggle': HTMLBrnToggleElement;
  }
  interface ElementTagNameMap {
    'brn-toggle': HTMLBrnToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'brn-toggle': JSXElements.BrnToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface BrnToggleAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'onChanged'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
      'type'?: keyof StyleType;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;